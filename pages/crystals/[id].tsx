import type {NextPage} from 'next';
import Head from 'next/head';
import Navbar from '../../components/Navbar';
import CrystalInfoPanel from '../../components/CrystalInfoPanel';
import CrystalCategoryItem from '../../components/CrystalCategoryItem';
import {prisma} from '../../lib/prisma';
import {Crystal} from '@prisma/client';
import AddItemBtn from '../../components/AddItemBtn';
import Modal from '../../components/Modal';
import {useState} from 'react';

export type CartItemType = {item: Crystal; quantity: number};

const Product: NextPage = (props: any) => {
  const [modalOpen, setModalOpen] = useState(false);

  const handleCloseModal = () => {
    setModalOpen(false);
  };
  //Modal will be triggered by AddItemBtn
  return (
    <div>
      <Head>
        <title>{props.name}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Navbar />
      <Modal opened={modalOpen} handleCloseModal={handleCloseModal} title='Quantity' description='tbd'></Modal>
      <div className='px-12 py-16'>
        <CrystalInfoPanel {...props} />
        <div className='text-center p-4 m-2'>
          <AddItemBtn item={props} />
        </div>
        <div className='bg-white text-emerald-400 text-xl text-center font-bold pt-8 p-4'>
          <h3>You may also like:</h3>
          <CrystalCategoryItem name='Ruby' price={99} />
        </div>
      </div>
    </div>
  );
};

export default Product;

export const getStaticProps = async ({params}: any) => {
  const data = await prisma.crystal.findUnique({
    where: {
      id: parseInt(params.id),
    },
    include: {
      categories: true,
    },
  });
  const crystal = JSON.parse(JSON.stringify(data));
  return {props: crystal};
};

export const getStaticPaths = async () => {
  const data = await prisma.crystal.findMany();
  const crystals = JSON.parse(JSON.stringify(data));
  const paths = crystals.map((crystal: any) => {
    return {params: {id: crystal.id.toString()}};
  });
  return {paths, fallback: false};
};

